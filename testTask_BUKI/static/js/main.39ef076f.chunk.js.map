{"version":3,"sources":["components/Messages/messages.module.css","components/Input/input.module.css","chat.module.css","components/Messages/Message/message.module.css","components/Header/Header.jsx","assets/heart.svg","assets/heartFill.svg","components/Messages/Message/Message.jsx","components/Input/InputText.jsx","assets/loader.svg","components/Messages/Messages.jsx","reducers/messagesReducer.js","Chat.jsx","reportWebVitals.js","reducers/store.js","index.js","components/Header/header.module.css"],"names":["module","exports","Header","countMessages","countUsers","lastData","className","s","header","logo","memo","Message","ava","date","name","messageText","deleteMessage","id","editMessage","useState","like","setLike","isEditingMessage","setIsEditingMessage","inputRef","useRef","toggleEditing","message","owner","src","alt","textBlock","ref","defaultValue","onClick","heartFill","heart","delete","edit","current","value","InputText","lastId","addMessage","inputValue","setInput","inputBlock","onChange","e","target","placeholder","type","disabled","nowDate","Date","now","dateString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","avatar","created_at","user","Messages","messages","isFetching","refList","messagesList","map","el","setLastId","length","setLength","useEffect","parseInt","item","scrollTop","scrollHeight","toString","onScrollMessages","loader","messagesListItems","GET_MESSAGES","USERS_IS_GETTING","ADD_MESSAGE","DELETE_MESSAGE","EDIT_MESSAGE","initialState","isLoading","usersCount","messagesCount","messagesReducer","state","action","fetching","addedMessages","newMessage","newMessages","deletedMessage","filter","getMessagesAction","Chat","this","props","getMessages","chat","lastMessage","isGettingMessages","Component","connect","dispatch","editMessageAction","a","fetch","response","json","Set","sort","b","addMessageAction","deleteMessageAction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thankMiddleWare","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39ef076f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"messages_messages__5_pkl\",\"messagesList\":\"messages_messagesList__2u3Sk\",\"messagesListItems\":\"messages_messagesListItems__p4ZiT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBlock\":\"input_inputBlock__3-jie\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"chat_chat__3egHL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"message_ava__1YtEl\",\"message\":\"message_message__Bq9YA\",\"owner\":\"message_owner__kqfVC\",\"delete\":\"message_delete__1I7Vp\",\"edit\":\"message_edit__Fkg_C\",\"like\":\"message_like__2dOr3\",\"textBlock\":\"message_textBlock__2_b57\",\"messageText\":\"message_messageText__37Q9p\",\"date\":\"message_date__1GwnM\",\"name\":\"message_name__1ICLS\"};","import React, {memo} from 'react'\r\nimport s from './header.module.css'\r\n\r\nconst Header = ({countMessages,countUsers, lastData}) =>{\r\n    return<header className={s.header}>\r\n        <p className={s.logo}>My Chat <span>{countUsers} users {countMessages} messages</span></p>\r\n        <p className={s.lastData}>Last message: {lastData}</p>\r\n    </header>\r\n}\r\nexport default memo(Header)","export default __webpack_public_path__ + \"static/media/heart.d16a1603.svg\";","export default __webpack_public_path__ + \"static/media/heartFill.d908e8ce.svg\";","import React, {memo, useRef, useState} from 'react'\r\nimport s from './message.module.css'\r\nimport heart from '../../../assets/heart.svg'\r\nimport heartFill from '../../../assets/heartFill.svg'\r\n\r\nconst Message = ({ava, date, name, messageText, deleteMessage, id, editMessage}) => {\r\n    const [like, setLike] = useState(false)\r\n    const [isEditingMessage, setIsEditingMessage] = useState(false)\r\n    const inputRef = useRef(null)\r\n    const toggleEditing = () => setIsEditingMessage(!isEditingMessage)\r\n    const saveEditValue = () => {\r\n        let message = inputRef.current.value\r\n        message === '' ? deleteMessage(id) : editMessage(id, message)\r\n\r\n        toggleEditing()\r\n    }\r\n    let clickLike = () => {\r\n        like ? setLike(false) : setLike(true)\r\n    }\r\n    let deleteMes = () => deleteMessage(id)\r\n    return <div className={`${s.message} ${name === 'Taylor' ? s.owner : ''}`}>\r\n        <img className={s.ava} src={ava} alt=\"\"/>\r\n        <div className={s.textBlock}>\r\n            <p className={s.name}>{name}</p>\r\n            {isEditingMessage ? <input ref={inputRef} defaultValue={messageText}/> :\r\n                <p className={s.messageText}>{messageText}</p>}\r\n        </div>\r\n        <p className={s.date}>{date}</p>\r\n        <button className={s.like} onClick={clickLike}><img src={like ? heartFill : heart} alt=\"&heart;\"/></button>\r\n        <button className={s.delete} onClick={deleteMes}>&times;</button>\r\n        {isEditingMessage ? <button className={s.edit} onClick={saveEditValue}>&rarr;</button> :\r\n            <button className={s.edit} onClick={toggleEditing}>&#47;</button>}\r\n    </div>\r\n}\r\nexport default memo(Message)","import React, {memo, useState} from 'react'\r\nimport s from './input.module.css'\r\n\r\nconst InputText = ({lastId, addMessage}) => {\r\n    const [inputValue, setInput] = useState('')\r\n    let sendMessage = () => {\r\n        let nowDate = Date.now()\r\n        nowDate = new Date(nowDate)\r\n        let dateString = `${nowDate.getFullYear()}-${nowDate.getMonth()+1}-${nowDate.getDate()} ${nowDate.getHours()}:${nowDate.getMinutes()}:${nowDate.getSeconds()}`\r\n        let newMessage = {\r\n            avatar: 'https://i.pravatar.cc/300?img=12',\r\n            created_at: dateString,\r\n            id: lastId,\r\n            message: inputValue,\r\n            user: 'Taylor'\r\n        }\r\n        addMessage(newMessage)\r\n        setInput('')\r\n    }\r\n    return <div className={s.inputBlock}>\r\n        <input value={inputValue} onChange={e => setInput(e.target.value)} placeholder=\"Type something...\" type=\"text\"/>\r\n        <button disabled={inputValue === ''} onClick={sendMessage}>SEND</button>\r\n    </div>\r\n}\r\nexport default memo(InputText)","export default __webpack_public_path__ + \"static/media/loader.3602fbbd.svg\";","import React, {memo, useEffect, useRef, useState} from 'react'\r\nimport Message from './Message/Message'\r\nimport s from './messages.module.css'\r\nimport InputText from '../Input/InputText'\r\nimport loader from '../../assets/loader.svg'\r\n\r\nconst Messages = ({messages, addMessage, isFetching, deleteMessage, editMessage}) => {\r\n    const refList = useRef(null)\r\n    let messagesList = messages.map((el) => {\r\n        return (\r\n            <Message key={el.id}\r\n                     id={el.id}\r\n                     editMessage={editMessage}\r\n                     deleteMessage={deleteMessage}\r\n                     ava={el.avatar}\r\n                     name={el.user}\r\n                     date={el.created_at}\r\n                     messageText={el.message}/>)\r\n    })\r\n\r\n    let onScrollMessages = () => {\r\n        let item = refList.current\r\n        item.scrollTop = item.scrollHeight.toString()\r\n    }\r\n    const [lastId, setLastId] = useState(null)\r\n    const [length, setLength] = useState(0)\r\n    useEffect(() => {\r\n        if (messages.length > 0) {\r\n            setLastId(parseInt(messages[messages.length - 1].id) + 1)\r\n            setLength(messages.length)\r\n        }\r\n    }, [messages])\r\n    useEffect(()=>onScrollMessages(),[length])\r\n\r\n    return <>\r\n        <div className={s.messages}>\r\n            <div ref={refList} className={s.messagesList}>\r\n                {isFetching ? <img src={loader} alt=\"\"/> : <div className={s.messagesListItems}>{messagesList}</div>}\r\n            </div>\r\n            <InputText addMessage={addMessage} lastId={lastId}/>\r\n        </div>\r\n    </>\r\n}\r\nexport default memo(Messages)","const GET_MESSAGES = 'GET_MESSAGES'\r\nconst USERS_IS_GETTING = 'USERS_IS_GETTING'\r\nconst ADD_MESSAGE = 'ADD_MESSAGE'\r\nconst DELETE_MESSAGE = 'DELETE_MESSAGE'\r\nconst EDIT_MESSAGE = 'EDIT_MESSAGE'\r\n\r\nlet initialState = {\r\n    messages: [],\r\n    isLoading: false,\r\n    usersCount: 0,\r\n    messagesCount: 0,\r\n    lastData: 0\r\n}\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_MESSAGES:\r\n            return {\r\n                ...state, messages: action.messages,\r\n                messagesCount: action.messages.length,\r\n                usersCount: action.countUsers,\r\n                lastData: action.lastData\r\n            }\r\n        case USERS_IS_GETTING:\r\n            return {...state, isLoading: action.fetching}\r\n        case ADD_MESSAGE:\r\n            let addedMessages = [...state.messages, action.newMessage]\r\n            return {\r\n                ...state,\r\n                messages: addedMessages,\r\n                messagesCount: state.messages.length + 1,\r\n                lastData: addedMessages[addedMessages.length-1].created_at\r\n            }\r\n        case EDIT_MESSAGE:\r\n            let newMessages = state.messages.map(el => el.id === action.id ? {...el, message: action.message} : {...el})\r\n            return {...state, messages: newMessages}\r\n        case DELETE_MESSAGE:\r\n            let deletedMessage = state.messages.filter(el => el.id !== action.id)\r\n            return {\r\n                ...state,\r\n                messages: [...deletedMessage],\r\n                messagesCount: state.messages.length - 1,\r\n                lastData: deletedMessage[deletedMessage.length-1].created_at\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default messagesReducer\r\nconst getMessagesAction = (messages, countUsers, lastData) => ({type: GET_MESSAGES, messages, countUsers, lastData})\r\nconst isFetching = (fetching) => ({type: USERS_IS_GETTING, fetching})\r\nconst addMessageAction = (newMessage) => ({type: ADD_MESSAGE, newMessage})\r\nconst deleteMessageAction = (id) => ({type: DELETE_MESSAGE, id})\r\nconst editMessageAction = (id, message) => ({type: EDIT_MESSAGE, id, message})\r\n\r\nexport const getMessages = () => async (dispatch) => {\r\n    dispatch(isFetching(true))\r\n    const response = await fetch('https://run.mocky.io/v3/b13799bf-0bf4-4a74-bf46-b7a2fb35a8c8')\r\n    const messages = await response.json()\r\n    const countUsers = [...new Set(messages.map(el => el.user))].length\r\n    const lastData = messages.sort((a, b) => a.created_at - b.created_at)[messages.length - 1].created_at\r\n    dispatch(getMessagesAction(messages, countUsers, lastData))\r\n    dispatch(isFetching(false))\r\n}\r\nexport const addMessage = (newMessage) => (dispatch) => {\r\n    dispatch(addMessageAction(newMessage))\r\n}\r\nexport const deleteMessage = (id) => (dispatch) => {\r\n    dispatch(deleteMessageAction(id))\r\n}\r\nexport const editMessage = (id, message) => (dispatch) => {\r\n    dispatch(editMessageAction(id, message))\r\n}","import './App.css'\nimport {Component} from 'react'\nimport Header from './components/Header/Header'\nimport Messages from './components/Messages/Messages'\nimport {connect} from 'react-redux'\nimport {addMessage, deleteMessage, editMessage, getMessages} from './reducers/messagesReducer'\nimport s from './chat.module.css'\n\nclass Chat extends Component {\n    componentDidMount() {\n        this.props.getMessages()\n    }\n\n    render() {\n        return (\n            <div className={s.chat}>\n                <Header lastData={this.props.lastMessage} countMessages={this.props.messagesCount} countUsers={this.props.usersCount}/>\n                <Messages editMessage={this.props.editMessage} deleteMessage={this.props.deleteMessage} addMessage={this.props.addMessage} isFetching={this.props.isGettingMessages} messages={this.props.messages}/>\n                <footer>\n                    <ul>\n                        <li>Home</li>\n                        <li>About</li>\n                        <li>Contact us</li>\n                    </ul>\n                    <p>@ Copyright 2019</p>\n                </footer>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    messages: state.messages.messages,\n    isGettingMessages: state.messages.isLoading,\n    messagesCount: state.messages.messagesCount,\n    usersCount: state.messages.usersCount,\n    lastMessage:state.messages.lastData,\n})\nexport default connect(mapStateToProps, {editMessage, getMessages, addMessage, deleteMessage})(Chat)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import messagesReducer from './messagesReducer'\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thankMiddleWare from 'redux-thunk'\r\n\r\nconst reducers = combineReducers({\r\n    messages: messagesReducer\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thankMiddleWare))\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Chat from './Chat';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport store from './reducers/store'\n\nReactDOM.render(\n      <Provider store={store}>\n          <Chat />\n      </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2JvcX\",\"logo\":\"header_logo__22NU3\",\"lastData\":\"header_lastData__24aOX\"};"],"sourceRoot":""}