{"ast":null,"code":"import { userAPI } from '../api/api';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nlet SET_USERS = 'SET_USERS';\nlet SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nlet SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT';\nlet TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nlet TOGGLE_IS_FOLlOWING_IN_PROGRESS = 'TOGGLE_IS_FOLlOWING_IN_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_USERS_TOTAL_COUNT:\n      return { ...state,\n        totalUsersCount: action.totalCount\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLlOWING_IN_PROGRESS:\n      return { ...state,\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n      };\n\n    default:\n      return initialState;\n  }\n};\n\nexport default usersReducer;\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setUsersTotalCount = totalCount => ({\n  type: SET_USERS_TOTAL_COUNT,\n  totalCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleIsFollowingInProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLlOWING_IN_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => async dispatch => {\n  dispatch(toggleIsFetching(true));\n  let data = await userAPI.getUsers(page, pageSize);\n  dispatch(toggleIsFetching(false));\n  dispatch(setCurrentPage(page));\n  dispatch(setUsers(data.items));\n  dispatch(setUsersTotalCount(data.totalCount));\n};\n\nlet followUnfollow = async (dispatch, userId, methodApi, actionCreator) => {\n  dispatch(toggleIsFollowingInProgress(true, userId));\n  let response = await methodApi(userId);\n\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleIsFollowingInProgress(false, userId));\n};\n\nexport const follow = userId => async dispatch => {\n  followUnfollow(dispatch, userId, userAPI.follow().bind(userId), followSuccess(userId));\n};\nexport const unfollow = userId => dispatch => {\n  followUnfollow(dispatch, userId, userAPI.unFollow().bind(userId), unfollowSuccess(userId));\n};","map":{"version":3,"sources":["C:/Users/art23/Desktop/react/first/src/redux/usersReducer.js"],"names":["userAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLlOWING_IN_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","totalCount","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleIsFollowingInProgress","requestUsers","page","dispatch","data","getUsers","items","followUnfollow","methodApi","actionCreator","response","resultCode","follow","bind","unfollow","unFollow"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,IAAIC,SAAS,GAAG,WAAhB;AACA,IAAIC,gBAAgB,GAAG,kBAAvB;AACA,IAAIC,qBAAqB,GAAG,uBAA5B;AACA,IAAIC,kBAAkB,GAAG,oBAAzB;AACA,IAAIC,+BAA+B,GAAG,iCAAtC;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAE,CAFK;AAGfC,EAAAA,eAAe,EAAE,CAHF;AAIfC,EAAAA,WAAW,EAAE,CAJE;AAKfC,EAAAA,UAAU,EAAE,KALG;AAMfC,EAAAA,mBAAmB,EAAE;AANN,CAAnB;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,MAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,CAAYU,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKlB,QAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,CAAYU,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKjB,SAAL;AACI,aAAO,EAAC,GAAGa,KAAJ;AAAWP,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AAAzB,OAAP;;AACJ,SAAKL,gBAAL;AACI,aAAO,EAAC,GAAGY,KAAJ;AAAWJ,QAAAA,WAAW,EAAEK,MAAM,CAACL;AAA/B,OAAP;;AACJ,SAAKP,qBAAL;AACI,aAAO,EAAC,GAAGW,KAAJ;AAAWL,QAAAA,eAAe,EAAEM,MAAM,CAACO;AAAnC,OAAP;;AACJ,SAAKlB,kBAAL;AACI,aAAO,EAAC,GAAGU,KAAJ;AAAWH,QAAAA,UAAU,EAAEI,MAAM,CAACJ;AAA9B,OAAP;;AACJ,SAAKN,+BAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHF,QAAAA,mBAAmB,EAAEG,MAAM,CAACJ,UAAP,GACf,CAAC,GAAGG,KAAK,CAACF,mBAAV,EAA+BG,MAAM,CAACK,MAAtC,CADe,GAEfN,KAAK,CAACF,mBAAN,CAA0BW,MAA1B,CAAiCJ,EAAE,IAAIA,EAAE,KAAKJ,MAAM,CAACK,MAArD;AAJH,OAAP;;AAMJ;AACI,aAAOd,YAAP;AArCR;AAuCH,CAxCD;;AAyCA,eAAeO,YAAf;AACA,OAAO,MAAMW,aAAa,GAAIJ,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEjB,MAAP;AAAeqB,EAAAA;AAAf,CAAb,CAAtB;AACP,OAAO,MAAMK,eAAe,GAAIL,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEhB,QAAP;AAAiBoB,EAAAA;AAAjB,CAAb,CAAxB;AACP,OAAO,MAAMM,QAAQ,GAAInB,KAAD,KAAY;AAACS,EAAAA,IAAI,EAAEf,SAAP;AAAkBM,EAAAA;AAAlB,CAAZ,CAAjB;AACP,OAAO,MAAMoB,cAAc,GAAIjB,WAAD,KAAkB;AAACM,EAAAA,IAAI,EAAEd,gBAAP;AAAyBQ,EAAAA;AAAzB,CAAlB,CAAvB;AACP,OAAO,MAAMkB,kBAAkB,GAAIN,UAAD,KAAiB;AAACN,EAAAA,IAAI,EAAEb,qBAAP;AAA8BmB,EAAAA;AAA9B,CAAjB,CAA3B;AACP,OAAO,MAAMO,gBAAgB,GAAIlB,UAAD,KAAiB;AAACK,EAAAA,IAAI,EAAEZ,kBAAP;AAA2BO,EAAAA;AAA3B,CAAjB,CAAzB;AACP,OAAO,MAAMmB,2BAA2B,GAAG,CAACnB,UAAD,EAAaS,MAAb,MAAyB;AAChEJ,EAAAA,IAAI,EAAEX,+BAD0D;AAEhEM,EAAAA,UAFgE;AAGhES,EAAAA;AAHgE,CAAzB,CAApC;AAMP,OAAO,MAAMW,YAAY,GAAG,CAACC,IAAD,EAAOxB,QAAP,KAAoB,MAAOyB,QAAP,IAAoB;AAChEA,EAAAA,QAAQ,CAACJ,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACA,MAAIK,IAAI,GAAG,MAAMpC,OAAO,CAACqC,QAAR,CAAiBH,IAAjB,EAAuBxB,QAAvB,CAAjB;AACAyB,EAAAA,QAAQ,CAACJ,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACAI,EAAAA,QAAQ,CAACN,cAAc,CAACK,IAAD,CAAf,CAAR;AACAC,EAAAA,QAAQ,CAACP,QAAQ,CAACQ,IAAI,CAACE,KAAN,CAAT,CAAR;AACAH,EAAAA,QAAQ,CAACL,kBAAkB,CAACM,IAAI,CAACZ,UAAN,CAAnB,CAAR;AAEH,CARM;;AASP,IAAIe,cAAc,GAAG,OAAOJ,QAAP,EAAiBb,MAAjB,EAAyBkB,SAAzB,EAAoCC,aAApC,KAAsD;AACvEN,EAAAA,QAAQ,CAACH,2BAA2B,CAAC,IAAD,EAAOV,MAAP,CAA5B,CAAR;AACA,MAAIoB,QAAQ,GAAG,MAAMF,SAAS,CAAClB,MAAD,CAA9B;;AACA,MAAIoB,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCR,IAAAA,QAAQ,CAACM,aAAa,CAACnB,MAAD,CAAd,CAAR;AACH;;AACDa,EAAAA,QAAQ,CAACH,2BAA2B,CAAC,KAAD,EAAQV,MAAR,CAA5B,CAAR;AACH,CAPD;;AAQA,OAAO,MAAMsB,MAAM,GAAItB,MAAD,IAAY,MAAOa,QAAP,IAAoB;AAClDI,EAAAA,cAAc,CAACJ,QAAD,EAAWb,MAAX,EAAmBtB,OAAO,CAAC4C,MAAR,GAAiBC,IAAjB,CAAsBvB,MAAtB,CAAnB,EAAkDI,aAAa,CAACJ,MAAD,CAA/D,CAAd;AACH,CAFM;AAGP,OAAO,MAAMwB,QAAQ,GAAIxB,MAAD,IAAaa,QAAD,IAAc;AAC9CI,EAAAA,cAAc,CAACJ,QAAD,EAAWb,MAAX,EAAmBtB,OAAO,CAAC+C,QAAR,GAAmBF,IAAnB,CAAwBvB,MAAxB,CAAnB,EAAoDK,eAAe,CAACL,MAAD,CAAnE,CAAd;AACH,CAFM","sourcesContent":["import {userAPI} from '../api/api'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nlet SET_USERS = 'SET_USERS'\r\nlet SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nlet SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT'\r\nlet TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nlet TOGGLE_IS_FOLlOWING_IN_PROGRESS = 'TOGGLE_IS_FOLlOWING_IN_PROGRESS'\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLlOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return initialState\r\n    }\r\n}\r\nexport default usersReducer\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setUsersTotalCount = (totalCount) => ({type: SET_USERS_TOTAL_COUNT, totalCount})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleIsFollowingInProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLlOWING_IN_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport const requestUsers = (page, pageSize) => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    let data = await userAPI.getUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setUsersTotalCount(data.totalCount))\r\n\r\n}\r\nlet followUnfollow = async (dispatch, userId, methodApi, actionCreator) => {\r\n    dispatch(toggleIsFollowingInProgress(true, userId))\r\n    let response = await methodApi(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingInProgress(false, userId))\r\n}\r\nexport const follow = (userId) => async (dispatch) => {\r\n    followUnfollow(dispatch, userId, userAPI.follow().bind(userId), followSuccess(userId))\r\n}\r\nexport const unfollow = (userId) => (dispatch) => {\r\n    followUnfollow(dispatch, userId, userAPI.unFollow().bind(userId), unfollowSuccess(userId))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}