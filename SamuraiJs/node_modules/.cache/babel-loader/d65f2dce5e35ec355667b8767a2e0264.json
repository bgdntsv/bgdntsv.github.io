{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false //isFetching: false\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setAuthUserData = (userId, email, login) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login\n  }\n});\n\nexport default authReducer;\nexport const authMe = () => {\n  return dispatch => {\n    authAPI.authMe().then(response => {\n      if (response.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data;\n        dispatch(setAuthUserData(id, email, login));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data;\n      dispatch(setAuthUserData(id, email, login));\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/art23/Desktop/react/first/src/redux/authReducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","authMe","dispatch","then","response","resultCode","id","password","rememberMe"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAKf;;AALe,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;;AAYA,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,MAA2B;AAACK,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,IAAI,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB;AAA5B,CAA3B,CAAxB;;AAEA,eAAeE,WAAf;AAEA,OAAO,MAAMM,MAAM,GAAG,MAAM;AACxB,SAAQC,QAAD,IAAc;AACjBd,IAAAA,OAAO,CAACa,MAAR,GAAiBE,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,UAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,YAAI;AAACC,UAAAA,EAAD;AAAKd,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAqBW,QAAQ,CAACL,IAAlC;AACAG,QAAAA,QAAQ,CAACF,eAAe,CAACM,EAAD,EAAKd,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,KALD;AAMH,GAPD;AAQH,CATM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiCN,QAAQ,IAAI;AAC9Dd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAoBe,QAApB,EAA6BC,UAA7B,EAAyCL,IAAzC,CAA8CC,QAAQ,IAAI;AACtD,QAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,UAAI;AAACC,QAAAA,EAAD;AAAKd,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBW,QAAQ,CAACL,IAAlC;AACAG,MAAAA,QAAQ,CAACF,eAAe,CAACM,EAAD,EAAKd,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,GALD;AAMH,CAPM","sourcesContent":["import {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n    //isFetching: false\r\n}\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst setAuthUserData = (userId, email, login) => ({type: SET_USER_DATA, data: {userId, email, login}})\r\n\r\nexport default authReducer\r\n\r\nexport const authMe = () => {\r\n    return (dispatch) => {\r\n        authAPI.authMe().then(response => {\r\n            if (response.resultCode === 0) {\r\n                let {id, email, login} = response.data;\r\n                dispatch(setAuthUserData(id, email, login))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const login = (email, password, rememberMe) => dispatch => {\r\n    authAPI.login(email,password,rememberMe).then(response => {\r\n        if (response.resultCode === 0) {\r\n            let {id, email, login} = response.data;\r\n            dispatch(setAuthUserData(id, email, login))\r\n        }\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}