{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\art23\\\\Desktop\\\\react\\\\first\\\\src\\\\components\\\\Profile\\\\ProfileContainer.jsx\";\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getStatus, savePhoto, selectedUser, updateStatus } from '../../redux/profileReducer';\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n\n      if (!userId) {\n        this.props.history.push('/login');\n      }\n    }\n\n    this.props.selectedUser(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps === this.props && prevState === this.state) {} else {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Profile, Object.assign({}, this.props, {\n      profile: this.props.profile,\n      isOwner: !this.props.match.params.userId,\n      status: this.props.status,\n      updateStatus: this.props.updateStatus,\n      savePhoto: this.props.savePhoto,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose(connect(mapStateToProps, {\n  selectedUser,\n  getStatus,\n  updateStatus,\n  savePhoto\n}), withRouter)(ProfileContainer);","map":{"version":3,"sources":["C:/Users/art23/Desktop/react/first/src/components/Profile/ProfileContainer.jsx"],"names":["React","Profile","connect","getStatus","savePhoto","selectedUser","updateStatus","withRouter","compose","ProfileContainer","Component","refreshProfile","userId","props","match","params","authorizedUserId","history","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","state","render","profile","status","mapStateToProps","profilePage","auth","isAuth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,EAAmBC,SAAnB,EAA8BC,YAA9B,EAA4CC,YAA5C,QAA+D,4BAA/D;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,OAAR,QAAsB,OAAtB;;AAEA,MAAMC,gBAAN,SAA+BT,KAAK,CAACU,SAArC,CAA8C;AAC1CC,EAAAA,cAAc,GAAE;AACZ,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAArC;;AACA,QAAG,CAACA,MAAJ,EAAW;AACPA,MAAAA,MAAM,GAAG,KAAKC,KAAL,CAAWG,gBAApB;;AACA,UAAG,CAACJ,MAAJ,EAAW;AACP,aAAKC,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ;;AACD,SAAKL,KAAL,CAAWR,YAAX,CAAwBO,MAAxB;AACA,SAAKC,KAAL,CAAWV,SAAX,CAAqBS,MAArB;AACH;;AACDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,cAAL;AACH;;AACDS,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAGF,SAAS,KAAG,KAAKR,KAAjB,IAA0BS,SAAS,KAAG,KAAKE,KAA9C,EAAoD,CAEnD,CAFD,MAEK;AACD,WAAKb,cAAL;AACH;AACJ;;AAEDc,EAAAA,MAAM,GAAG;AACL,wBAAM,uDACF,oBAAC,OAAD,oBAAa,KAAKZ,KAAlB;AACS,MAAA,OAAO,EAAG,KAAKA,KAAL,CAAWa,OAD9B;AAES,MAAA,OAAO,EAAE,CAAC,KAAKb,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAF3C;AAGS,MAAA,MAAM,EAAI,KAAKC,KAAL,CAAWc,MAH9B;AAIS,MAAA,YAAY,EAAI,KAAKd,KAAL,CAAWP,YAJpC;AAKS,MAAA,SAAS,EAAI,KAAKO,KAAL,CAAWT,SALjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADE,CAAN;AAQH;;AAhCyC;;AAmC9C,IAAIwB,eAAe,GAAIJ,KAAD,KAAY;AAC9BE,EAAAA,OAAO,EAAEF,KAAK,CAACK,WAAN,CAAkBH,OADG;AAE9BC,EAAAA,MAAM,EAAEH,KAAK,CAACK,WAAN,CAAkBF,MAFI;AAG9BX,EAAAA,gBAAgB,EAAEQ,KAAK,CAACM,IAAN,CAAWlB,MAHC;AAI9BmB,EAAAA,MAAM,EAAEP,KAAK,CAACM,IAAN,CAAWC;AAJW,CAAZ,CAAtB;;AAOA,eAAevB,OAAO,CAClBN,OAAO,CAAC0B,eAAD,EAAiB;AAACvB,EAAAA,YAAD;AAAeF,EAAAA,SAAf;AAA0BG,EAAAA,YAA1B;AAAwCF,EAAAA;AAAxC,CAAjB,CADW,EAElBG,UAFkB,CAAP,CAGbE,gBAHa,CAAf","sourcesContent":["import React from 'react'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, savePhoto, selectedUser, updateStatus} from '../../redux/profileReducer'\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component{\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId\r\n        if(!userId){\r\n            userId = this.props.authorizedUserId\r\n            if(!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.selectedUser(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps===this.props && prevState===this.state){\r\n\r\n        }else{\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return<>\r\n            <Profile {...this.props}\r\n                     profile ={this.props.profile}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     status = {this.props.status}\r\n                     updateStatus = {this.props.updateStatus}\r\n                     savePhoto = {this.props.savePhoto}/>\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{selectedUser, getStatus, updateStatus, savePhoto}),\r\n    withRouter\r\n)(ProfileContainer)"]},"metadata":{},"sourceType":"module"}