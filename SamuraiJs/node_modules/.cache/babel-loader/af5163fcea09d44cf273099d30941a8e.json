{"ast":null,"code":"import { authAPI } from '../api/api';\nimport { stopSubmit } from 'redux-form';\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false //isFetching: false\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\n\nexport const authMe = () => {\n  async dispatch => {\n    let promise = await authAPI.authMe();\n\n    if (promise.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  };\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.resultCode === 0) {\n      dispatch(authMe());\n    } else {\n      debugger;\n      let message = response.messages.length > 0 ? response.messages[0] : 'Some error';\n      dispatch(stopSubmit('login', {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/art23/Desktop/react/first/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","authMe","dispatch","promise","resultCode","id","response","data","password","rememberMe","then","message","messages","length","_error","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAKf;;AALe,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAWA,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AACvDI,EAAAA,IAAI,EAAET,aADiD;AAEvDU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAF8C,CAAnC,CAAxB;;AAKA,OAAO,MAAMO,MAAM,GAAG,MAAM;AACxB,QAAOC,QAAP,IAAoB;AAChB,QAAIC,OAAO,GAAG,MAAMhB,OAAO,CAACc,MAAR,EAApB;;AACA,QAAIE,OAAO,CAACC,UAAR,KAAuB,CAA3B,EAA8B;AAC1B,UAAI;AAACC,QAAAA,EAAD;AAAKb,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBa,QAAQ,CAACC,IAAlC;AACAL,MAAAA,QAAQ,CAACF,eAAe,CAACK,EAAD,EAAKb,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GAND;AAOH,CARM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiCP,QAAQ,IAAI;AAC9Df,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EAA2CC,IAA3C,CAAgDJ,QAAQ,IAAI;AACxD,QAAIA,QAAQ,CAACF,UAAT,KAAwB,CAA5B,EAA+B;AAC3BF,MAAAA,QAAQ,CAACD,MAAM,EAAP,CAAR;AACH,KAFD,MAEO;AACH;AACA,UAAIU,OAAO,GAAGL,QAAQ,CAACM,QAAT,CAAkBC,MAAlB,GAA2B,CAA3B,GAA+BP,QAAQ,CAACM,QAAT,CAAkB,CAAlB,CAA/B,GAAsD,YAApE;AACAV,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC0B,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACH;AACJ,GARD;AASH,CAVM;AAWP,OAAO,MAAMI,MAAM,GAAG,MAAMb,QAAQ,IAAI;AACpCf,EAAAA,OAAO,CAAC4B,MAAR,GAAiBL,IAAjB,CAAsBJ,QAAQ,IAAI;AAC9B,QAAIA,QAAQ,CAACC,IAAT,CAAcH,UAAd,KAA6B,CAAjC,EAAoC;AAChCF,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAQP,eAAeL,WAAf","sourcesContent":["import {authAPI} from '../api/api'\r\nimport {stopSubmit} from 'redux-form'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n    //isFetching: false\r\n}\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n})\r\n\r\nexport const authMe = () => {\r\n    async (dispatch) => {\r\n        let promise = await authAPI.authMe()\r\n        if (promise.resultCode === 0) {\r\n            let {id, email, login} = response.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n    }\r\n}\r\nexport const login = (email, password, rememberMe) => dispatch => {\r\n    authAPI.login(email, password, rememberMe).then(response => {\r\n        if (response.resultCode === 0) {\r\n            dispatch(authMe())\r\n        } else {\r\n            debugger\r\n            let message = response.messages.length > 0 ? response.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    })\r\n}\r\nexport const logout = () => dispatch => {\r\n    authAPI.logout().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    })\r\n}\r\n\r\nexport default authReducer"]},"metadata":{},"sourceType":"module"}